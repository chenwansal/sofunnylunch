{"version":3,"file":"AdminGetAllCommentService.js","sourceRoot":"./src/","sources":["Service/Admin/AdminGetAllCommentService.ts"],"names":[],"mappings":";;;AAKA,MAAa,yBAAyB;IAMlC,gBAAe,CAAC;IAEhB,MAAM,CAAC,IAAgB,EAAE,OAAgB,EAAE,UAAsB;QAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAED,SAAS;QAEL,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,sBAAsB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAEtD,yDAAyD;YACzD,kBAAkB;YAClB,6BAA6B;YAC7B,cAAc;YACd,IAAI;YAeJ,IAAI,GAAG,GAAgC,IAAI,GAAG,EAAE,CAAC;YAEjD,IAAI,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;YACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC3C,IAAI,GAAG,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,CAAC,GAAG,EAAE;oBACN,GAAG,GAAG;wBACF,MAAM,EAAE,GAAG,CAAC,MAAM;wBAClB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI;wBAC/C,UAAU,EAAE,EAAE;qBACjB,CAAA;oBACD,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;iBAC5B;gBACD,IAAI,OAAO,GAAY;oBACnB,MAAM,EAAE,GAAG,CAAC,MAAM;oBAClB,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,IAAI,EAAE,GAAG,CAAC,IAAI;oBACd,OAAO,EAAE,GAAG,CAAC,OAAO;iBACvB,CAAA;gBACD,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAChC;YAGD,IAAI,GAAG,GAAqB,EAAE,CAAC;YAE/B,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAChB,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACd,oBAAoB;QAExB,CAAC,CAAC,CAAC;IAEP,CAAC;CAEJ;AA1ED,8DA0EC","sourcesContent":["import { HttpServer } from \"jackwebutil\";\r\nimport { CommentDao } from \"../../DB/Dao/Comment/CommentDao\";\r\nimport { FoodDao } from \"../../DB/Dao/Food/FoodDao\";\r\nimport { RequestQueryHelper } from \"../../Util/RequestQueryHelper\";\r\n\r\nexport class AdminGetAllCommentService {\r\n\r\n    http: HttpServer;\r\n    foodDao: FoodDao;\r\n    commentDao: CommentDao;\r\n\r\n    constructor() {}\r\n\r\n    Inject(http: HttpServer, foodDao: FoodDao, commentDao: CommentDao) {\r\n        this.http = http;\r\n        this.foodDao = foodDao;\r\n        this.commentDao = commentDao;\r\n    }\r\n\r\n    Listening() {\r\n        \r\n        this.http.PostListen(\"/Admin/GetAllComment\", (req, res) => {\r\n\r\n            // let isAdmin = RequestQueryHelper.IsAdministrator(req);\r\n            // if (!isAdmin) {\r\n            //     res.status(500).end();\r\n            //     return;\r\n            // }\r\n\r\n            type OneFoodComment = {\r\n                foodId: number,\r\n                foodName: string,\r\n                commentArr: Comment[]\r\n            }\r\n\r\n            type Comment = {\r\n                yymmdd: string,\r\n                star: number,\r\n                tags: string[],\r\n                content: string\r\n            }\r\n\r\n            let map: Map<number, OneFoodComment> = new Map();\r\n\r\n            let allComment = this.commentDao.GetAllComment();\r\n            for (let i = 0; i < allComment.length; i += 1) {\r\n                let com = allComment[i];\r\n                let one = map.get(com.foodId);\r\n                if (!one) {\r\n                    one = {\r\n                        foodId: com.foodId,\r\n                        foodName: this.foodDao.GetFood(com.foodId).name,\r\n                        commentArr: []\r\n                    }\r\n                    map.set(com.foodId, one);\r\n                }\r\n                let comment: Comment = {\r\n                    yymmdd: com.yymmdd,\r\n                    star: com.star,\r\n                    tags: com.tags,\r\n                    content: com.content\r\n                }\r\n                one.commentArr.push(comment);\r\n            }\r\n\r\n\r\n            let arr: OneFoodComment[] = [];\r\n\r\n            map.forEach(value => {\r\n                arr.push(value);\r\n            });\r\n\r\n            res.json(arr);\r\n            // console.log(arr);\r\n\r\n        });\r\n\r\n    }\r\n\r\n}"]}