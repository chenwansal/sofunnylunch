{"version":3,"file":"CommentDao.js","sourceRoot":"./src/","sources":["DB/Dao/Comment/CommentDao.ts"],"names":[],"mappings":";;;AAAA,yDAAsD;AACtD,mDAAgD;AAEhD,2BAAiC;AACjC,yDAAsD;AACtD,yDAAsD;AAGtD,MAAa,UAAU;IAMnB,gBAAe,CAAC;IAEhB,IAAI;QACA,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;IACrC,CAAC;IAEO,cAAc;QAElB,IAAI,GAAG,GAAG,EAAE,CAAC;QAEb,IAAI,GAAG,GAAG,uBAAU,CAAC,mBAAmB,EAAE,CAAC;QAC3C,IAAI,KAAK,GAAG,gBAAW,CAAC,GAAG,CAAC,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACtC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,OAAO,GAAG,yBAAW,CAAC,gBAAgB,CAAe,GAAG,GAAG,IAAI,CAAC,CAAC;YACrE,IAAI,OAAO,EAAE;gBACT,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACrB;SACJ;QAED,OAAO,GAAG,CAAC;IAEf,CAAC;IAED,aAAa;QACT,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,OAAO,IAAI,CAAC,GAAG,CAAC;SACnB;QAED,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC,GAAG,CAAC;IACpB,CAAC;IAED,eAAe;QACX,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAC/B,IAAI,KAAK,GAAG,uBAAU,CAAC,WAAW,EAAE,CAAC;QACrC,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC;IACtD,CAAC;IAED,YAAY,CAAC,EAAS,EAAE,MAAc,EAAE,MAAc;QAClD,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,KAAK,CAAC,MAAM,IAAI,MAAM,IAAI,KAAK,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC;QAC5G,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;YACb,OAAO,KAAK,CAAC;SAChB;aAAM;YACH,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,UAAU,CAAC,OAAqB;QAE5B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAEvB,yBAAW,CAAC,WAAW,CAAC,uBAAU,CAAC,mBAAmB,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,OAAO,EAAE,OAAO,CAAC,CAAC;QAErG,UAAU,CAAC,SAAS,IAAI,CAAC,CAAC;QAC1B,yBAAW,CAAC,OAAO,EAAE,CAAC;IAE1B,CAAC;CAEJ;AAjED,gCAiEC","sourcesContent":["import { PathHelper } from \"../../../Util/PathHelper\";\r\nimport { JsonVisitor } from \"../../JsonVisitor\";\r\nimport { CommentTable } from \"../../Table/CommentTable\";\r\nimport { readdirSync } from \"fs\";\r\nimport { IdRecordDao } from \"../IdRecord/IdRecordDao\";\r\nimport { DateHelper } from \"../../../Util/DateHelper\";\r\n\r\n\r\nexport class CommentDao {\r\n\r\n    static currentId: number;\r\n\r\n    arr: CommentTable[];\r\n\r\n    constructor() {}\r\n\r\n    Init() {\r\n        this.arr = this.LoadAllComment();\r\n    }\r\n\r\n    private LoadAllComment(): CommentTable[] {\r\n\r\n        let arr = [];\r\n\r\n        let dir = PathHelper.GetJsonDBCommentDir();\r\n        let files = readdirSync(dir);\r\n        for (let i = 0; i < files.length; i += 1) {\r\n            let file = files[i];\r\n            let comment = JsonVisitor.ReadJsonFromFile<CommentTable>(dir + file);\r\n            if (comment) {\r\n                arr.push(comment);\r\n            }\r\n        }\r\n\r\n        return arr;\r\n\r\n    }\r\n\r\n    GetAllComment(): CommentTable[] {\r\n        if (this.arr) {\r\n            return this.arr;\r\n        }\r\n\r\n        this.arr = this.LoadAllComment();\r\n        return this.arr;\r\n    }\r\n\r\n    GetTodayComment(): CommentTable[] {\r\n        let all = this.GetAllComment();\r\n        let today = DateHelper.GetYYYYMMDD();\r\n        return all.filter(value => value.yymmdd == today);\r\n    }\r\n\r\n    HasCommented(ip:string, foodId: number, yymmdd: string): boolean {\r\n        let index = this.arr.findIndex(value => value.ip == ip && value.foodId == foodId && value.yymmdd == yymmdd);\r\n        if (index == -1) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    AddComment(comment: CommentTable): void {\r\n\r\n        this.arr.push(comment);\r\n\r\n        JsonVisitor.WriteToFile(PathHelper.GetJsonDBCommentDir() + comment.id.toString() + \".json\", comment);\r\n\r\n        CommentDao.currentId += 1;\r\n        IdRecordDao.WriteId();\r\n\r\n    }\r\n\r\n}"]}