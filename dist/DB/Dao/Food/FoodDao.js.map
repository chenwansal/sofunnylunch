{"version":3,"file":"FoodDao.js","sourceRoot":"./src/","sources":["DB/Dao/Food/FoodDao.ts"],"names":[],"mappings":";;;AAAA,yDAAsD;AACtD,mDAAgD;AAChD,qDAAkD;AAClD,2BAAiC;AACjC,yDAAsD;AAEtD,MAAa,OAAO;IAMhB,IAAI;QACA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;IACrC,CAAC;IAED,UAAU;QAEN,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,IAAI,CAAC,OAAO,CAAC;SACvB;QAED,IAAI,GAAG,GAAG,uBAAU,CAAC,gBAAgB,EAAE,CAAC;QACxC,IAAI,KAAK,GAAG,gBAAW,CAAC,GAAG,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAgB,EAAE,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACtC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,IAAI,GAAG,yBAAW,CAAC,gBAAgB,CAAY,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC;YACrE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED,eAAe,CAAC,IAAY;QACxB,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;SACzD;IACL,CAAC;IAED,OAAO,CAAC,EAAU;QAEd,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;SACrD;QAED,IAAI,IAAI,GAAG,uBAAU,CAAC,gBAAgB,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;QACxD,IAAI,SAAS,GAAG,yBAAW,CAAC,gBAAgB,CAAY,IAAI,CAAC,CAAC;QAC9D,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,eAAe,CAAC,QAAgB;QAE5B,IAAI,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAE3C,IAAI,KAAK,EAAE;YACP,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,GAAG,IAAI,qBAAS,EAAE,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEnB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAErB,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC;QACvB,yBAAW,CAAC,OAAO,EAAE,CAAC;QAEtB,OAAO,IAAI,CAAC;IAEhB,CAAC;IAEO,SAAS,CAAC,SAAoB;QAElC,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAChC;QAED,IAAI,IAAI,GAAG,uBAAU,CAAC,gBAAgB,EAAE,GAAG,SAAS,CAAC,EAAE,GAAG,OAAO,CAAC;QAClE,yBAAW,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IAEO,UAAU,CAAC,UAAuB;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC3C,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;SACjC;IACL,CAAC;CAEJ;AAlFD,0BAkFC","sourcesContent":["import { PathHelper } from \"../../../Util/PathHelper\";\r\nimport { JsonVisitor } from \"../../JsonVisitor\";\r\nimport { FoodTable } from \"../../Table/FoodTable\";\r\nimport { readdirSync } from \"fs\";\r\nimport { IdRecordDao } from \"../IdRecord/IdRecordDao\";\r\n\r\nexport class FoodDao {\r\n\r\n    static currentId: number;\r\n\r\n    allFood: FoodTable[];\r\n\r\n    Init(): void {\r\n        this.allFood = this.GetAllFood();\r\n    }\r\n\r\n    GetAllFood(): FoodTable[] {\r\n\r\n        if (this.allFood) {\r\n            return this.allFood;\r\n        }\r\n\r\n        let dir = PathHelper.GetJsonDBFoodDir();\r\n        let files = readdirSync(dir);\r\n        let res: FoodTable[] = [];\r\n        for (let i = 0; i < files.length; i += 1) {\r\n            let file = files[i];\r\n            let food = JsonVisitor.ReadJsonFromFile<FoodTable>(dir + \"/\" + file);\r\n            res.push(food);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    GetFoodWithName(name: string): FoodTable {\r\n        if (this.allFood) {\r\n            return this.allFood.find(value => value.name == name);\r\n        }\r\n    }\r\n\r\n    GetFood(id: number): FoodTable {\r\n\r\n        if (this.allFood) {\r\n            return this.allFood.find(value => value.id == id);\r\n        }\r\n\r\n        let path = PathHelper.GetJsonDBFoodDir() + id + \".json\";\r\n        let foodTable = JsonVisitor.ReadJsonFromFile<FoodTable>(path);\r\n        return foodTable;\r\n    }\r\n\r\n    AddFoodWithName(foodName: string): FoodTable {\r\n\r\n        let exist = this.GetFoodWithName(foodName);\r\n\r\n        if (exist) {\r\n            return exist;\r\n        }\r\n\r\n        let food = new FoodTable();\r\n        food.id = FoodDao.currentId;\r\n        food.name = foodName;\r\n        food.supplier = \"\";\r\n\r\n        this.WriteFood(food);\r\n\r\n        FoodDao.currentId += 1;\r\n        IdRecordDao.WriteId();\r\n\r\n        return food;\r\n\r\n    }\r\n\r\n    private WriteFood(foodTable: FoodTable): void {\r\n\r\n        if (this.allFood) {\r\n            this.allFood.push(foodTable);\r\n        }\r\n\r\n        let path = PathHelper.GetJsonDBFoodDir() + foodTable.id + \".json\";\r\n        JsonVisitor.WriteToFile(path, foodTable);\r\n    }\r\n\r\n    private WriteFoods(foodTables: FoodTable[]): void {\r\n        for (let i = 0; i < foodTables.length; i += 1) {\r\n            this.WriteFood(foodTables[i]);\r\n        }\r\n    }\r\n\r\n}"]}