"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FoodDao = void 0;
const PathHelper_1 = require("../../../Util/PathHelper");
const JsonVisitor_1 = require("../../JsonVisitor");
const fs_1 = require("fs");
class FoodDao {
    Init() {
        this.allFood = this.GetAllFood();
    }
    GetAllFood() {
        if (this.allFood != null) {
            return this.allFood;
        }
        let dir = PathHelper_1.PathHelper.GetJsonDBFoodDir();
        let files = fs_1.readdirSync(dir);
        let res = [];
        for (let i = 0; i < files.length; i += 1) {
            let file = files[i];
            let food = JsonVisitor_1.JsonVisitor.ReadJsonFromFile(dir + "/" + file);
            res.push(food);
        }
        return res;
    }
    GetFood(id) {
        if (this.allFood != null) {
            return this.allFood.find(value => value.id == id);
        }
        let path = PathHelper_1.PathHelper.GetJsonDBFoodDir() + id + ".json";
        let foodTable = JsonVisitor_1.JsonVisitor.ReadJsonFromFile(path);
        return foodTable;
    }
    AddFood(foodTable) {
        if (this.allFood != null) {
            this.allFood.push(foodTable);
        }
        let path = PathHelper_1.PathHelper.GetJsonDBFoodDir() + foodTable.id + ".json";
        JsonVisitor_1.JsonVisitor.WriteToFile(path, foodTable);
    }
    AddFoods(foodTables) {
        for (let i = 0; i < foodTables.length; i += 1) {
            this.AddFood(foodTables[i]);
        }
    }
}
exports.FoodDao = FoodDao;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9vZERhby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9EQi9EYW8vRm9vZC9Gb29kRGFvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlEQUFzRDtBQUN0RCxtREFBZ0Q7QUFFaEQsMkJBQWlDO0FBRWpDLE1BQWEsT0FBTztJQUloQixJQUFJO1FBQ0EsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELFVBQVU7UUFFTixJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztTQUN2QjtRQUVELElBQUksR0FBRyxHQUFHLHVCQUFVLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN4QyxJQUFJLEtBQUssR0FBRyxnQkFBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksR0FBRyxHQUFnQixFQUFFLENBQUM7UUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN0QyxJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsSUFBSSxJQUFJLEdBQUcseUJBQVcsQ0FBQyxnQkFBZ0IsQ0FBWSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBQ3JFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBVTtRQUVkLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksR0FBRyx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUN4RCxJQUFJLFNBQVMsR0FBRyx5QkFBVyxDQUFDLGdCQUFnQixDQUFZLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPLENBQUMsU0FBb0I7UUFFeEIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNoQztRQUVELElBQUksSUFBSSxHQUFHLHVCQUFVLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNsRSx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFFBQVEsQ0FBQyxVQUF1QjtRQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0NBRUo7QUFwREQsMEJBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aEhlbHBlciB9IGZyb20gXCIuLi8uLi8uLi9VdGlsL1BhdGhIZWxwZXJcIjtcclxuaW1wb3J0IHsgSnNvblZpc2l0b3IgfSBmcm9tIFwiLi4vLi4vSnNvblZpc2l0b3JcIjtcclxuaW1wb3J0IHsgRm9vZFRhYmxlIH0gZnJvbSBcIi4uLy4uL1RhYmxlL0Zvb2RUYWJsZVwiO1xyXG5pbXBvcnQgeyByZWFkZGlyU3luYyB9IGZyb20gXCJmc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvb2REYW8ge1xyXG5cclxuICAgIGFsbEZvb2Q6IEZvb2RUYWJsZVtdO1xyXG5cclxuICAgIEluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5hbGxGb29kID0gdGhpcy5HZXRBbGxGb29kKCk7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0QWxsRm9vZCgpOiBGb29kVGFibGVbXSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFsbEZvb2QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxGb29kO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRpciA9IFBhdGhIZWxwZXIuR2V0SnNvbkRCRm9vZERpcigpO1xyXG4gICAgICAgIGxldCBmaWxlcyA9IHJlYWRkaXJTeW5jKGRpcik7XHJcbiAgICAgICAgbGV0IHJlczogRm9vZFRhYmxlW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGxldCBmaWxlID0gZmlsZXNbaV07XHJcbiAgICAgICAgICAgIGxldCBmb29kID0gSnNvblZpc2l0b3IuUmVhZEpzb25Gcm9tRmlsZTxGb29kVGFibGU+KGRpciArIFwiL1wiICsgZmlsZSk7XHJcbiAgICAgICAgICAgIHJlcy5wdXNoKGZvb2QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIEdldEZvb2QoaWQ6IG51bWJlcik6IEZvb2RUYWJsZSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFsbEZvb2QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxGb29kLmZpbmQodmFsdWUgPT4gdmFsdWUuaWQgPT0gaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhdGggPSBQYXRoSGVscGVyLkdldEpzb25EQkZvb2REaXIoKSArIGlkICsgXCIuanNvblwiO1xyXG4gICAgICAgIGxldCBmb29kVGFibGUgPSBKc29uVmlzaXRvci5SZWFkSnNvbkZyb21GaWxlPEZvb2RUYWJsZT4ocGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIGZvb2RUYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICBBZGRGb29kKGZvb2RUYWJsZTogRm9vZFRhYmxlKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFsbEZvb2QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbEZvb2QucHVzaChmb29kVGFibGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhdGggPSBQYXRoSGVscGVyLkdldEpzb25EQkZvb2REaXIoKSArIGZvb2RUYWJsZS5pZCArIFwiLmpzb25cIjtcclxuICAgICAgICBKc29uVmlzaXRvci5Xcml0ZVRvRmlsZShwYXRoLCBmb29kVGFibGUpO1xyXG4gICAgfVxyXG5cclxuICAgIEFkZEZvb2RzKGZvb2RUYWJsZXM6IEZvb2RUYWJsZVtdKTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb29kVGFibGVzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuQWRkRm9vZChmb29kVGFibGVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19