"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FoodDao = void 0;
const PathHelper_1 = require("../../../Util/PathHelper");
const JsonVisitor_1 = require("../../JsonVisitor");
const FoodTable_1 = require("../../Table/FoodTable");
const fs_1 = require("fs");
class FoodDao {
    Init() {
        this.allFood = this.GetAllFood();
    }
    GetAllFood() {
        if (this.allFood != null) {
            return this.allFood;
        }
        let dir = PathHelper_1.PathHelper.GetJsonDBFoodDir();
        let files = fs_1.readdirSync(dir);
        let res = [];
        for (let i = 0; i < files.length; i += 1) {
            let file = files[i];
            let food = JsonVisitor_1.JsonVisitor.ReadJsonFromFile(dir + "/" + file);
            res.push(food);
        }
        return res;
    }
    GetFoodWithName(name) {
        if (this.allFood != null) {
            return this.allFood.find(value => value.name == name);
        }
    }
    GetFood(id) {
        if (this.allFood != null) {
            return this.allFood.find(value => value.id == id);
        }
        let path = PathHelper_1.PathHelper.GetJsonDBFoodDir() + id + ".json";
        let foodTable = JsonVisitor_1.JsonVisitor.ReadJsonFromFile(path);
        return foodTable;
    }
    AddFoodWithName(foodName) {
        let exist = this.GetFoodWithName(foodName);
        if (exist) {
            return exist.id;
        }
        let lastFood = this.allFood[this.allFood.length - 1];
        let newId = lastFood.id + 1;
        let food = new FoodTable_1.FoodTable();
        food.id = newId;
        food.name = foodName;
        food.supplier = "";
        this.AddFood(food);
        return newId;
    }
    AddFood(foodTable) {
        if (this.allFood != null) {
            this.allFood.push(foodTable);
        }
        let path = PathHelper_1.PathHelper.GetJsonDBFoodDir() + foodTable.id + ".json";
        JsonVisitor_1.JsonVisitor.WriteToFile(path, foodTable);
    }
    AddFoods(foodTables) {
        for (let i = 0; i < foodTables.length; i += 1) {
            this.AddFood(foodTables[i]);
        }
    }
}
exports.FoodDao = FoodDao;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9vZERhby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9EQi9EYW8vRm9vZC9Gb29kRGFvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlEQUFzRDtBQUN0RCxtREFBZ0Q7QUFDaEQscURBQWtEO0FBQ2xELDJCQUFpQztBQUVqQyxNQUFhLE9BQU87SUFJaEIsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxVQUFVO1FBRU4sSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdkI7UUFFRCxJQUFJLEdBQUcsR0FBRyx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDeEMsSUFBSSxLQUFLLEdBQUcsZ0JBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBZ0IsRUFBRSxDQUFDO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksSUFBSSxHQUFHLHlCQUFXLENBQUMsZ0JBQWdCLENBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUNyRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBRUQsZUFBZSxDQUFDLElBQVk7UUFDeEIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBVTtRQUVkLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksR0FBRyx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUN4RCxJQUFJLFNBQVMsR0FBRyx5QkFBVyxDQUFDLGdCQUFnQixDQUFZLElBQUksQ0FBQyxDQUFDO1FBQzlELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxlQUFlLENBQUMsUUFBZ0I7UUFFNUIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzQyxJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQztTQUNuQjtRQUVELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFNUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixPQUFPLEtBQUssQ0FBQztJQUVqQixDQUFDO0lBRUQsT0FBTyxDQUFDLFNBQW9CO1FBRXhCLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUU7WUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDaEM7UUFFRCxJQUFJLElBQUksR0FBRyx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsU0FBUyxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDbEUseUJBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxRQUFRLENBQUMsVUFBdUI7UUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztDQUVKO0FBL0VELDBCQStFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhdGhIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vVXRpbC9QYXRoSGVscGVyXCI7XHJcbmltcG9ydCB7IEpzb25WaXNpdG9yIH0gZnJvbSBcIi4uLy4uL0pzb25WaXNpdG9yXCI7XHJcbmltcG9ydCB7IEZvb2RUYWJsZSB9IGZyb20gXCIuLi8uLi9UYWJsZS9Gb29kVGFibGVcIjtcclxuaW1wb3J0IHsgcmVhZGRpclN5bmMgfSBmcm9tIFwiZnNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGb29kRGFvIHtcclxuXHJcbiAgICBhbGxGb29kOiBGb29kVGFibGVbXTtcclxuXHJcbiAgICBJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWxsRm9vZCA9IHRoaXMuR2V0QWxsRm9vZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIEdldEFsbEZvb2QoKTogRm9vZFRhYmxlW10ge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hbGxGb29kICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsRm9vZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBkaXIgPSBQYXRoSGVscGVyLkdldEpzb25EQkZvb2REaXIoKTtcclxuICAgICAgICBsZXQgZmlsZXMgPSByZWFkZGlyU3luYyhkaXIpO1xyXG4gICAgICAgIGxldCByZXM6IEZvb2RUYWJsZVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBsZXQgZmlsZSA9IGZpbGVzW2ldO1xyXG4gICAgICAgICAgICBsZXQgZm9vZCA9IEpzb25WaXNpdG9yLlJlYWRKc29uRnJvbUZpbGU8Rm9vZFRhYmxlPihkaXIgKyBcIi9cIiArIGZpbGUpO1xyXG4gICAgICAgICAgICByZXMucHVzaChmb29kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBHZXRGb29kV2l0aE5hbWUobmFtZTogc3RyaW5nKTogRm9vZFRhYmxlIHtcclxuICAgICAgICBpZiAodGhpcy5hbGxGb29kICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWxsRm9vZC5maW5kKHZhbHVlID0+IHZhbHVlLm5hbWUgPT0gbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEdldEZvb2QoaWQ6IG51bWJlcik6IEZvb2RUYWJsZSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFsbEZvb2QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxGb29kLmZpbmQodmFsdWUgPT4gdmFsdWUuaWQgPT0gaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhdGggPSBQYXRoSGVscGVyLkdldEpzb25EQkZvb2REaXIoKSArIGlkICsgXCIuanNvblwiO1xyXG4gICAgICAgIGxldCBmb29kVGFibGUgPSBKc29uVmlzaXRvci5SZWFkSnNvbkZyb21GaWxlPEZvb2RUYWJsZT4ocGF0aCk7XHJcbiAgICAgICAgcmV0dXJuIGZvb2RUYWJsZTtcclxuICAgIH1cclxuXHJcbiAgICBBZGRGb29kV2l0aE5hbWUoZm9vZE5hbWU6IHN0cmluZyk6IG51bWJlciB7XHJcblxyXG4gICAgICAgIGxldCBleGlzdCA9IHRoaXMuR2V0Rm9vZFdpdGhOYW1lKGZvb2ROYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKGV4aXN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBleGlzdC5pZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsYXN0Rm9vZCA9IHRoaXMuYWxsRm9vZFt0aGlzLmFsbEZvb2QubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgbGV0IG5ld0lkID0gbGFzdEZvb2QuaWQgKyAxO1xyXG5cclxuICAgICAgICBsZXQgZm9vZCA9IG5ldyBGb29kVGFibGUoKTtcclxuICAgICAgICBmb29kLmlkID0gbmV3SWQ7XHJcbiAgICAgICAgZm9vZC5uYW1lID0gZm9vZE5hbWU7XHJcbiAgICAgICAgZm9vZC5zdXBwbGllciA9IFwiXCI7XHJcblxyXG4gICAgICAgIHRoaXMuQWRkRm9vZChmb29kKTtcclxuICAgICAgICByZXR1cm4gbmV3SWQ7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIEFkZEZvb2QoZm9vZFRhYmxlOiBGb29kVGFibGUpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWxsRm9vZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsRm9vZC5wdXNoKGZvb2RUYWJsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgcGF0aCA9IFBhdGhIZWxwZXIuR2V0SnNvbkRCRm9vZERpcigpICsgZm9vZFRhYmxlLmlkICsgXCIuanNvblwiO1xyXG4gICAgICAgIEpzb25WaXNpdG9yLldyaXRlVG9GaWxlKHBhdGgsIGZvb2RUYWJsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgQWRkRm9vZHMoZm9vZFRhYmxlczogRm9vZFRhYmxlW10pOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvb2RUYWJsZXMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5BZGRGb29kKGZvb2RUYWJsZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXX0=