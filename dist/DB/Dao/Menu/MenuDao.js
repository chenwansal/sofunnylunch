"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuDao = void 0;
const DateHelper_1 = require("../../../Util/DateHelper");
const fs_1 = require("fs");
const JsonVisitor_1 = require("../../JsonVisitor");
const PathHelper_1 = require("../../../Util/PathHelper");
class MenuDao {
    constructor() { }
    Init() {
        this.allMenu = this.GetAllMenu();
        this.todayMenu = this.GetTodayMenu();
    }
    GetTodayMenu() {
        if (this.todayMenu != null) {
            return this.todayMenu;
        }
        if (this.allMenu == null) {
            this.allMenu = this.GetAllMenu();
        }
        this.todayMenu = this.allMenu.find(value => value.yyyymmdd == DateHelper_1.DateHelper.GetYYYYMMDD());
        return this.todayMenu;
    }
    AddMenu(menu) {
        if (this.allMenu != null) {
            this.allMenu.push(menu);
        }
        let dir = PathHelper_1.PathHelper.GetJsonDBMenuDir() + menu.yyyymmdd;
        let path = dir + ".json";
        JsonVisitor_1.JsonVisitor.WriteToFile(path, menu);
    }
    GetAllMenu() {
        if (this.allMenu != null) {
            return this.allMenu;
        }
        let dir = PathHelper_1.PathHelper.GetJsonDBMenuDir();
        if (!fs_1.existsSync(dir)) {
            console.log("不存在目录:" + dir);
            return [];
        }
        let files = fs_1.readdirSync(dir);
        let menuArr = [];
        for (let i = 0; i < files.length; i += 1) {
            let file = files[i];
            let path = dir + "/" + file;
            let menu = JsonVisitor_1.JsonVisitor.ReadJsonFromFile(path);
            if (menu) {
                menuArr.push(menu);
            }
            else {
                console.log("不存在文件:" + path);
            }
        }
        if (menuArr.length == 0) {
            console.log("无菜单");
        }
        return menuArr;
    }
}
exports.MenuDao = MenuDao;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudURhby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9EQi9EYW8vTWVudS9NZW51RGFvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlEQUFzRDtBQUV0RCwyQkFBd0Q7QUFDeEQsbURBQWdEO0FBQ2hELHlEQUFzRDtBQUV0RCxNQUFhLE9BQU87SUFLaEIsZ0JBQWdCLENBQUM7SUFFakIsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxZQUFZO1FBRVIsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDekI7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1NBQ3BDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksdUJBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUUxQixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQWU7UUFFbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksR0FBRyxHQUFHLHVCQUFVLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3hELElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUM7UUFDekIseUJBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxVQUFVO1FBRU4sSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdkI7UUFFRCxJQUFJLEdBQUcsR0FBVyx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLGVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUM1QixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQ0QsSUFBSSxLQUFLLEdBQWEsZ0JBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLE9BQU8sR0FBZ0IsRUFBRSxDQUFDO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQzVCLElBQUksSUFBSSxHQUFjLHlCQUFXLENBQUMsZ0JBQWdCLENBQVksSUFBSSxDQUFDLENBQUM7WUFDcEUsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUNoQztTQUNKO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBcEVELDBCQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vVXRpbC9EYXRlSGVscGVyXCI7XHJcbmltcG9ydCB7IE1lbnVUYWJsZSB9IGZyb20gXCIuLi8uLi9UYWJsZS9NZW51VGFibGVcIjtcclxuaW1wb3J0IHsgcmVhZGRpclN5bmMsIG1rZGlyU3luYywgZXhpc3RzU3luYyB9IGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgeyBKc29uVmlzaXRvciB9IGZyb20gXCIuLi8uLi9Kc29uVmlzaXRvclwiO1xyXG5pbXBvcnQgeyBQYXRoSGVscGVyIH0gZnJvbSBcIi4uLy4uLy4uL1V0aWwvUGF0aEhlbHBlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lbnVEYW8ge1xyXG5cclxuICAgIGFsbE1lbnU6IE1lbnVUYWJsZVtdO1xyXG4gICAgdG9kYXlNZW51OiBNZW51VGFibGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWxsTWVudSA9IHRoaXMuR2V0QWxsTWVudSgpO1xyXG4gICAgICAgIHRoaXMudG9kYXlNZW51ID0gdGhpcy5HZXRUb2RheU1lbnUoKTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRUb2RheU1lbnUoKTogTWVudVRhYmxlIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudG9kYXlNZW51ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9kYXlNZW51O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWxsTWVudSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsTWVudSA9IHRoaXMuR2V0QWxsTWVudSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50b2RheU1lbnUgPSB0aGlzLmFsbE1lbnUuZmluZCh2YWx1ZSA9PiB2YWx1ZS55eXl5bW1kZCA9PSBEYXRlSGVscGVyLkdldFlZWVlNTUREKCkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvZGF5TWVudTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgQWRkTWVudShtZW51OiBNZW51VGFibGUpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWxsTWVudSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsTWVudS5wdXNoKG1lbnUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRpciA9IFBhdGhIZWxwZXIuR2V0SnNvbkRCTWVudURpcigpICsgbWVudS55eXl5bW1kZDtcclxuICAgICAgICBsZXQgcGF0aCA9IGRpciArIFwiLmpzb25cIjtcclxuICAgICAgICBKc29uVmlzaXRvci5Xcml0ZVRvRmlsZShwYXRoLCBtZW51KTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRBbGxNZW51KCk6IE1lbnVUYWJsZVtdIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWxsTWVudSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbE1lbnU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZGlyOiBzdHJpbmcgPSBQYXRoSGVscGVyLkdldEpzb25EQk1lbnVEaXIoKTtcclxuICAgICAgICBpZiAoIWV4aXN0c1N5bmMoZGlyKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS4jeWtmOWcqOebruW9lTpcIiArIGRpcik7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGZpbGVzOiBzdHJpbmdbXSA9IHJlYWRkaXJTeW5jKGRpcik7XHJcbiAgICAgICAgbGV0IG1lbnVBcnI6IE1lbnVUYWJsZVtdID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBsZXQgZmlsZSA9IGZpbGVzW2ldO1xyXG4gICAgICAgICAgICBsZXQgcGF0aCA9IGRpciArIFwiL1wiICsgZmlsZTtcclxuICAgICAgICAgICAgbGV0IG1lbnU6IE1lbnVUYWJsZSA9IEpzb25WaXNpdG9yLlJlYWRKc29uRnJvbUZpbGU8TWVudVRhYmxlPihwYXRoKTtcclxuICAgICAgICAgICAgaWYgKG1lbnUpIHtcclxuICAgICAgICAgICAgICAgIG1lbnVBcnIucHVzaChtZW51KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5LiN5a2Y5Zyo5paH5Lu2OlwiICsgcGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChtZW51QXJyLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5peg6I+c5Y2VXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWVudUFycjtcclxuICAgIH1cclxuXHJcbn0iXX0=