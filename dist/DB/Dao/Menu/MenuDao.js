"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuDao = void 0;
const DateHelper_1 = require("../../../Util/DateHelper");
const fs_1 = require("fs");
const JsonVisitor_1 = require("../../JsonVisitor");
const PathHelper_1 = require("../../../Util/PathHelper");
class MenuDao {
    constructor() { }
    Init() {
        this.allMenu = this.GetAllMenu();
        this.todayMenu = this.GetTodayMenu();
    }
    GetTodayMenu() {
        if (this.todayMenu != null) {
            return this.todayMenu;
        }
        if (this.allMenu != null) {
            this.todayMenu = this.allMenu.find(value => value.yyyymmdd == DateHelper_1.DateHelper.GetYYYYMMDD());
            return this.todayMenu;
        }
        else {
            console.warn("找不到菜单");
        }
    }
    AddMenu(menu) {
        if (this.allMenu != null) {
            this.allMenu.push(menu);
        }
        let dir = PathHelper_1.PathHelper.GetJsonDBMenuDir() + menu.yyyymmdd;
        let path = dir + ".json";
        JsonVisitor_1.JsonVisitor.WriteToFile(path, menu);
    }
    GetAllMenu() {
        if (this.allMenu != null) {
            return this.allMenu;
        }
        let dir = PathHelper_1.PathHelper.GetJsonDBMenuDir();
        if (!fs_1.existsSync(dir)) {
            console.log("不存在目录:" + dir);
            return [];
        }
        let files = fs_1.readdirSync(dir);
        let menuArr = [];
        for (let i = 0; i < files.length; i += 1) {
            let file = files[i];
            let path = dir + "/" + file;
            let menu = JsonVisitor_1.JsonVisitor.ReadJsonFromFile(path);
            if (menu) {
                menuArr.push(menu);
            }
            else {
                console.log("不存在文件:" + path);
            }
        }
        if (menuArr.length == 0) {
            console.log("无菜单");
        }
        return menuArr;
    }
}
exports.MenuDao = MenuDao;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVudURhby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9EQi9EYW8vTWVudS9NZW51RGFvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlEQUFzRDtBQUV0RCwyQkFBd0Q7QUFDeEQsbURBQWdEO0FBQ2hELHlEQUFzRDtBQUV0RCxNQUFhLE9BQU87SUFLaEIsZ0JBQWdCLENBQUM7SUFFakIsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxZQUFZO1FBRVIsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDekI7UUFFRCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLHVCQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUN4RixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDekI7YUFBTTtZQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekI7SUFFTCxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQWU7UUFFbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMzQjtRQUVELElBQUksR0FBRyxHQUFHLHVCQUFVLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3hELElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUM7UUFDekIseUJBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxVQUFVO1FBRU4sSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRTtZQUN0QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdkI7UUFFRCxJQUFJLEdBQUcsR0FBVyx1QkFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDLGVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUM1QixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBQ0QsSUFBSSxLQUFLLEdBQWEsZ0JBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLE9BQU8sR0FBZ0IsRUFBRSxDQUFDO1FBQzlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1lBQzVCLElBQUksSUFBSSxHQUFjLHlCQUFXLENBQUMsZ0JBQWdCLENBQVksSUFBSSxDQUFDLENBQUM7WUFDcEUsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN0QjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQzthQUNoQztTQUNKO1FBRUQsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKO0FBcEVELDBCQW9FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVIZWxwZXIgfSBmcm9tIFwiLi4vLi4vLi4vVXRpbC9EYXRlSGVscGVyXCI7XHJcbmltcG9ydCB7IE1lbnVUYWJsZSB9IGZyb20gXCIuLi8uLi9UYWJsZS9NZW51VGFibGVcIjtcclxuaW1wb3J0IHsgcmVhZGRpclN5bmMsIG1rZGlyU3luYywgZXhpc3RzU3luYyB9IGZyb20gXCJmc1wiO1xyXG5pbXBvcnQgeyBKc29uVmlzaXRvciB9IGZyb20gXCIuLi8uLi9Kc29uVmlzaXRvclwiO1xyXG5pbXBvcnQgeyBQYXRoSGVscGVyIH0gZnJvbSBcIi4uLy4uLy4uL1V0aWwvUGF0aEhlbHBlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lbnVEYW8ge1xyXG5cclxuICAgIGFsbE1lbnU6IE1lbnVUYWJsZVtdO1xyXG4gICAgdG9kYXlNZW51OiBNZW51VGFibGU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7IH1cclxuXHJcbiAgICBJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWxsTWVudSA9IHRoaXMuR2V0QWxsTWVudSgpO1xyXG4gICAgICAgIHRoaXMudG9kYXlNZW51ID0gdGhpcy5HZXRUb2RheU1lbnUoKTtcclxuICAgIH1cclxuXHJcbiAgICBHZXRUb2RheU1lbnUoKTogTWVudVRhYmxlIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudG9kYXlNZW51ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9kYXlNZW51O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuYWxsTWVudSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9kYXlNZW51ID0gdGhpcy5hbGxNZW51LmZpbmQodmFsdWUgPT4gdmFsdWUueXl5eW1tZGQgPT0gRGF0ZUhlbHBlci5HZXRZWVlZTU1ERCgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9kYXlNZW51O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuaJvuS4jeWIsOiPnOWNlVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIEFkZE1lbnUobWVudTogTWVudVRhYmxlKTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFsbE1lbnUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbE1lbnUucHVzaChtZW51KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBkaXIgPSBQYXRoSGVscGVyLkdldEpzb25EQk1lbnVEaXIoKSArIG1lbnUueXl5eW1tZGQ7XHJcbiAgICAgICAgbGV0IHBhdGggPSBkaXIgKyBcIi5qc29uXCI7XHJcbiAgICAgICAgSnNvblZpc2l0b3IuV3JpdGVUb0ZpbGUocGF0aCwgbWVudSk7XHJcbiAgICB9XHJcblxyXG4gICAgR2V0QWxsTWVudSgpOiBNZW51VGFibGVbXSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFsbE1lbnUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxNZW51O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGRpcjogc3RyaW5nID0gUGF0aEhlbHBlci5HZXRKc29uREJNZW51RGlyKCk7XHJcbiAgICAgICAgaWYgKCFleGlzdHNTeW5jKGRpcikpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLkuI3lrZjlnKjnm67lvZU6XCIgKyBkaXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBmaWxlczogc3RyaW5nW10gPSByZWFkZGlyU3luYyhkaXIpO1xyXG4gICAgICAgIGxldCBtZW51QXJyOiBNZW51VGFibGVbXSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgbGV0IGZpbGUgPSBmaWxlc1tpXTtcclxuICAgICAgICAgICAgbGV0IHBhdGggPSBkaXIgKyBcIi9cIiArIGZpbGU7XHJcbiAgICAgICAgICAgIGxldCBtZW51OiBNZW51VGFibGUgPSBKc29uVmlzaXRvci5SZWFkSnNvbkZyb21GaWxlPE1lbnVUYWJsZT4ocGF0aCk7XHJcbiAgICAgICAgICAgIGlmIChtZW51KSB7XHJcbiAgICAgICAgICAgICAgICBtZW51QXJyLnB1c2gobWVudSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuS4jeWtmOWcqOaWh+S7tjpcIiArIHBhdGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobWVudUFyci5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuaXoOiPnOWNlVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1lbnVBcnI7XHJcbiAgICB9XHJcblxyXG59Il19